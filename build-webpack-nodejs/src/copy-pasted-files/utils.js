"use strict";
// tslint:disable
// TODO: dont copy paste this
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: cleanup this file, it's copied as is from Angular CLI.
const path = require("path");
exports.ngAppResolve = (resolvePath) => {
    return path.resolve(process.cwd(), resolvePath);
};
const webpackOutputOptions = {
    colors: true,
    hash: true,
    timings: true,
    chunks: true,
    chunkModules: false,
    children: false,
    modules: false,
    reasons: false,
    warnings: true,
    errors: true,
    assets: true,
    version: false,
    errorDetails: false,
    moduleTrace: false,
};
const verboseWebpackOutputOptions = {
    children: true,
    assets: true,
    version: true,
    reasons: true,
    chunkModules: false,
    errorDetails: true,
    moduleTrace: true,
};
function getWebpackStatsConfig(verbose = false) {
    return verbose
        ? Object.assign(webpackOutputOptions, verboseWebpackOutputOptions)
        : webpackOutputOptions;
}
exports.getWebpackStatsConfig = getWebpackStatsConfig;
function getOutputHashFormat(option, length = 20) {
    /* tslint:disable:max-line-length */
    const hashFormats = {
        none: { chunk: '', extract: '', file: '', script: '' },
        media: { chunk: '', extract: '', file: `.[hash:${length}]`, script: '' },
        bundles: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: '', script: `.[hash:${length}]` },
        all: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: `.[hash:${length}]`, script: `.[hash:${length}]` },
    };
    /* tslint:enable:max-line-length */
    return hashFormats[option] || hashFormats['none'];
}
exports.getOutputHashFormat = getOutputHashFormat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX3dlYnBhY2tfbm9kZWpzL3NyYy9jb3B5LXBhc3RlZC1maWxlcy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUJBQWlCO0FBQ2pCLDZCQUE2Qjs7QUFFN0IsK0RBQStEO0FBRS9ELDZCQUE2QjtBQUdoQixRQUFBLFlBQVksR0FBRyxDQUFDLFdBQW1CLEVBQVUsRUFBRTtJQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRztJQUMzQixNQUFNLEVBQUUsSUFBSTtJQUNaLElBQUksRUFBRSxJQUFJO0lBQ1YsT0FBTyxFQUFFLElBQUk7SUFDYixNQUFNLEVBQUUsSUFBSTtJQUNaLFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxLQUFLO0lBQ2YsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxJQUFJO0lBQ2QsTUFBTSxFQUFFLElBQUk7SUFDWixNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxLQUFLO0lBQ2QsWUFBWSxFQUFFLEtBQUs7SUFDbkIsV0FBVyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQztBQUVGLE1BQU0sMkJBQTJCLEdBQUc7SUFDbEMsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7SUFDYixZQUFZLEVBQUUsS0FBSztJQUNuQixZQUFZLEVBQUUsSUFBSTtJQUNsQixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsK0JBQXNDLE9BQU8sR0FBRyxLQUFLO0lBQ25ELE1BQU0sQ0FBQyxPQUFPO1FBQ1osQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsMkJBQTJCLENBQUM7UUFDbEUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0FBQzNCLENBQUM7QUFKRCxzREFJQztBQVNELDZCQUFvQyxNQUFjLEVBQUUsTUFBTSxHQUFHLEVBQUU7SUFDN0Qsb0NBQW9DO0lBQ3BDLE1BQU0sV0FBVyxHQUFxQztRQUNwRCxJQUFJLEVBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUF3QixPQUFPLEVBQUUsRUFBRSxFQUEwQixJQUFJLEVBQUUsRUFBRSxFQUFtQixNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQ3hILEtBQUssRUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQXdCLE9BQU8sRUFBRSxFQUFFLEVBQTBCLElBQUksRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUc7UUFDekgsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLGVBQWUsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFtQixNQUFNLEVBQUUsVUFBVSxNQUFNLEdBQUcsRUFBRztRQUMxSSxHQUFHLEVBQU0sRUFBRSxLQUFLLEVBQUUsZUFBZSxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFHO0tBQzNJLENBQUM7SUFDRixtQ0FBbUM7SUFDbkMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQVZELGtEQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGVcbi8vIFRPRE86IGRvbnQgY29weSBwYXN0ZSB0aGlzXG5cbi8vIFRPRE86IGNsZWFudXAgdGhpcyBmaWxlLCBpdCdzIGNvcGllZCBhcyBpcyBmcm9tIEFuZ3VsYXIgQ0xJLlxuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgYmFzZW5hbWUsIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcblxuZXhwb3J0IGNvbnN0IG5nQXBwUmVzb2x2ZSA9IChyZXNvbHZlUGF0aDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCByZXNvbHZlUGF0aCk7XG59O1xuXG5jb25zdCB3ZWJwYWNrT3V0cHV0T3B0aW9ucyA9IHtcbiAgY29sb3JzOiB0cnVlLFxuICBoYXNoOiB0cnVlLCAvLyByZXF1aXJlZCBieSBjdXN0b20gc3RhdCBvdXRwdXRcbiAgdGltaW5nczogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIGNodW5rczogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIGNodW5rTW9kdWxlczogZmFsc2UsXG4gIGNoaWxkcmVuOiBmYWxzZSwgLy8gbGlzdGluZyBhbGwgY2hpbGRyZW4gaXMgdmVyeSBub2lzeSBpbiBBT1QgYW5kIGhpZGVzIHdhcm5pbmdzL2Vycm9yc1xuICBtb2R1bGVzOiBmYWxzZSxcbiAgcmVhc29uczogZmFsc2UsXG4gIHdhcm5pbmdzOiB0cnVlLFxuICBlcnJvcnM6IHRydWUsXG4gIGFzc2V0czogdHJ1ZSwgLy8gcmVxdWlyZWQgYnkgY3VzdG9tIHN0YXQgb3V0cHV0XG4gIHZlcnNpb246IGZhbHNlLFxuICBlcnJvckRldGFpbHM6IGZhbHNlLFxuICBtb2R1bGVUcmFjZTogZmFsc2UsXG59O1xuXG5jb25zdCB2ZXJib3NlV2VicGFja091dHB1dE9wdGlvbnMgPSB7XG4gIGNoaWxkcmVuOiB0cnVlLFxuICBhc3NldHM6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG4gIHJlYXNvbnM6IHRydWUsXG4gIGNodW5rTW9kdWxlczogZmFsc2UsIC8vIFRPRE86IHNldCB0byB0cnVlIHdoZW4gY29uc29sZSB0byBmaWxlIG91dHB1dCBpcyBmaXhlZFxuICBlcnJvckRldGFpbHM6IHRydWUsXG4gIG1vZHVsZVRyYWNlOiB0cnVlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlYnBhY2tTdGF0c0NvbmZpZyh2ZXJib3NlID0gZmFsc2UpIHtcbiAgcmV0dXJuIHZlcmJvc2VcbiAgICA/IE9iamVjdC5hc3NpZ24od2VicGFja091dHB1dE9wdGlvbnMsIHZlcmJvc2VXZWJwYWNrT3V0cHV0T3B0aW9ucylcbiAgICA6IHdlYnBhY2tPdXRwdXRPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hGb3JtYXQge1xuICBjaHVuazogc3RyaW5nO1xuICBleHRyYWN0OiBzdHJpbmc7XG4gIGZpbGU6IHN0cmluZztcbiAgc2NyaXB0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRwdXRIYXNoRm9ybWF0KG9wdGlvbjogc3RyaW5nLCBsZW5ndGggPSAyMCk6IEhhc2hGb3JtYXQge1xuICAvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbiAgY29uc3QgaGFzaEZvcm1hdHM6IHsgW29wdGlvbjogc3RyaW5nXTogSGFzaEZvcm1hdCB9ID0ge1xuICAgIG5vbmU6ICAgIHsgY2h1bms6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdDogJycsICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6ICcnICAgICAgICAgICAgICAgICAsIHNjcmlwdDogJycgfSxcbiAgICBtZWRpYTogICB7IGNodW5rOiAnJywgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3Q6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBgLltoYXNoOiR7bGVuZ3RofV1gLCBzY3JpcHQ6ICcnICB9LFxuICAgIGJ1bmRsZXM6IHsgY2h1bms6IGAuW2NodW5raGFzaDoke2xlbmd0aH1dYCwgZXh0cmFjdDogYC5bY29udGVudGhhc2g6JHtsZW5ndGh9XWAsIGZpbGU6ICcnICAgICAgICAgICAgICAgICAsIHNjcmlwdDogYC5baGFzaDoke2xlbmd0aH1dYCAgfSxcbiAgICBhbGw6ICAgICB7IGNodW5rOiBgLltjaHVua2hhc2g6JHtsZW5ndGh9XWAsIGV4dHJhY3Q6IGAuW2NvbnRlbnRoYXNoOiR7bGVuZ3RofV1gLCBmaWxlOiBgLltoYXNoOiR7bGVuZ3RofV1gLCBzY3JpcHQ6IGAuW2hhc2g6JHtsZW5ndGh9XWAgIH0sXG4gIH07XG4gIC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4gIHJldHVybiBoYXNoRm9ybWF0c1tvcHRpb25dIHx8IGhhc2hGb3JtYXRzWydub25lJ107XG59XG5cblxuIl19