"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const fs = require("fs");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const webpack = require("webpack");
const read_tsconfig_1 = require("../copy-pasted-files/read-tsconfig");
const stats_1 = require("../copy-pasted-files/stats");
const utils_1 = require("../copy-pasted-files/utils");
const make_outfile_name_1 = require("../utils/make-outfile-name");
const common_1 = require("../webpack/common");
const dev_1 = require("../webpack/dev");
const prod_1 = require("../webpack/prod");
const webpackMerge = require('webpack-merge');
class ServerBuilder {
    constructor(context) {
        this.context = context;
    }
    run(target) {
        const root = core_1.getSystemPath(this.context.workspace.root);
        const options = target.options;
        const outfileName = make_outfile_name_1.makeOutfileName(path_1.resolve(root, options.main));
        const absMain = path_1.resolve(root, options.main);
        const absOutDir = path_1.resolve(root, options.outputPath);
        const absTsConfig = path_1.resolve(root, target.options.tsConfig);
        // TODO: Should these erros go through the Observable?
        if (!fs.existsSync(absMain)) {
            throw new Error(`Unable to find entry file
    Relative Path: ${options.main}
    Absolute Path: ${absMain}
`);
        }
        if (!fs.existsSync(absTsConfig)) {
            throw new Error(`Unable to find tsConfig file
    Relative Path: ${options.tsConfig}
    Absolute Path: ${absTsConfig}
`);
        }
        const commonWebpackConfig = common_1.getCommonWebpackConfig(absMain, absOutDir, absTsConfig, outfileName, options);
        const prodWebpackConfig = prod_1.getWebpackProdConfig(options.externals);
        const devWebppackConfig = dev_1.getWebpackDevConfig();
        const webpackConfig = webpackMerge([commonWebpackConfig].concat(options.optimization ? prodWebpackConfig : devWebppackConfig));
        const tsConfig = read_tsconfig_1.readTsconfig(absTsConfig);
        if (tsConfig.options.paths) {
            Object.entries(tsConfig.options.paths).forEach(([importPath, values]) => {
                // tslint:disable-next-line:non-null-operator
                values.forEach(value => webpackConfig.resolve.alias[importPath] = path_1.resolve(root, value));
            });
        }
        if (options.pathReplacements) {
            options.pathReplacements
                .forEach(alias => webpackConfig.resolve.alias[alias.path] =
                path_1.resolve(root, alias.replaceWith));
        }
        const compiler = webpack(webpackConfig);
        return this.startWebpack(options.watch, compiler, options.verbose).pipe(operators_1.map(success => ({ success })));
    }
    startWebpack(watch, compiler, verbose) {
        return new rxjs_1.Observable(obs => {
            const handler = (err, stats) => {
                if (err) {
                    return obs.error(err);
                }
                const statsConfig = utils_1.getWebpackStatsConfig(verbose);
                const json = stats.toJson(statsConfig);
                if (verbose) {
                    this.context.logger.info(stats.toString(statsConfig));
                }
                else {
                    this.context.logger.info(stats_1.statsToString(json, statsConfig));
                }
                if (stats.hasWarnings()) {
                    this.context.logger.warn(stats_1.statsWarningsToString(json, statsConfig));
                }
                if (stats.hasErrors()) {
                    this.context.logger.error(stats_1.statsErrorsToString(json, statsConfig));
                }
                obs.next(!stats.hasErrors());
            };
            if (watch) {
                const watching = compiler.watch({}, handler);
                return () => watching.close(() => { });
            }
            else {
                compiler.run((err, stats) => {
                    handler(err, stats);
                    obs.complete();
                });
            }
        });
    }
}
exports.ServerBuilder = ServerBuilder;
exports.default = ServerBuilder;
//# sourceMappingURL=data:application/json;base64,